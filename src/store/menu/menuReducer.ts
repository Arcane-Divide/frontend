import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '..';


export interface MenuState {
  view: string;
}

const initialState: MenuState = {
  view: '',
};


export const menuSlice = createSlice({
    name: 'menu',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
  
      // Use the PayloadAction type to declare the contents of `action.payload`
      setView: (state: { view: string; }, action: PayloadAction<string>) => {
        state.view = action.payload;
      },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
  });

  export const { setView } = menuSlice.actions;

  export const selectView = (state: RootState) => state.menu.view;

  export default menuSlice.reducer;